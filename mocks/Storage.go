// Code generated by mockery v2.12.0. DO NOT EDIT.

package mocks

import (
	testing "testing"

	mock "github.com/stretchr/testify/mock"
)

// Storage is an autogenerated mock type for the Storage type
type Storage struct {
	mock.Mock
}

// Alloc provides a mock function with given fields: name
func (_m *Storage) Alloc(name string) error {
	ret := _m.Called(name)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Append provides a mock function with given fields: name, val
func (_m *Storage) Append(name string, val int) error {
	ret := _m.Called(name, val)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, int) error); ok {
		r0 = rf(name, val)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Empty provides a mock function with given fields: s
func (_m *Storage) Empty(s string) bool {
	ret := _m.Called(s)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(s)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Last provides a mock function with given fields: name
func (_m *Storage) Last(name string) (int, error) {
	ret := _m.Called(name)

	var r0 int
	if rf, ok := ret.Get(0).(func(string) int); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Pop provides a mock function with given fields: name
func (_m *Storage) Pop(name string) (int, error) {
	ret := _m.Called(name)

	var r0 int
	if rf, ok := ret.Get(0).(func(string) int); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: name, val
func (_m *Storage) Update(name string, val int) error {
	ret := _m.Called(name, val)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, int) error); ok {
		r0 = rf(name, val)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewStorage creates a new instance of Storage. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewStorage(t testing.TB) *Storage {
	mock := &Storage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
